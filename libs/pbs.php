<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.2
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('pbs')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_pbs.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('pbs.so')) return;
    } else {
      if (!dl('pbs.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class pbs {
	const ATTR_a = ATTR_a;

	const ATTR_c = ATTR_c;

	const ATTR_e = ATTR_e;

	const ATTR_f = ATTR_f;

	const ATTR_g = ATTR_g;

	const ATTR_h = ATTR_h;

	const ATTR_j = ATTR_j;

	const ATTR_k = ATTR_k;

	const ATTR_l = ATTR_l;

	const ATTR_m = ATTR_m;

	const ATTR_o = ATTR_o;

	const ATTR_p = ATTR_p;

	const ATTR_q = ATTR_q;

	const ATTR_r = ATTR_r;

	const ATTR_t = ATTR_t;

	const ATTR_array_id = ATTR_array_id;

	const ATTR_u = ATTR_u;

	const ATTR_v = ATTR_v;

	const ATTR_A = ATTR_A;

	const ATTR_M = ATTR_M;

	const ATTR_N = ATTR_N;

	const ATTR_S = ATTR_S;

	const ATTR_depend = ATTR_depend;

	const ATTR_inter = ATTR_inter;

	const ATTR_stagein = ATTR_stagein;

	const ATTR_stageout = ATTR_stageout;

	const ATTR_jobtype = ATTR_jobtype;

	const ATTR_ctime = ATTR_ctime;

	const ATTR_exechost = ATTR_exechost;

	const ATTR_mtime = ATTR_mtime;

	const ATTR_qtime = ATTR_qtime;

	const ATTR_session = ATTR_session;

	const ATTR_euser = ATTR_euser;

	const ATTR_egroup = ATTR_egroup;

	const ATTR_hashname = ATTR_hashname;

	const ATTR_hopcount = ATTR_hopcount;

	const ATTR_security = ATTR_security;

	const ATTR_sched_hint = ATTR_sched_hint;

	const ATTR_substate = ATTR_substate;

	const ATTR_name = ATTR_name;

	const ATTR_owner = ATTR_owner;

	const ATTR_used = ATTR_used;

	const ATTR_state = ATTR_state;

	const ATTR_queue = ATTR_queue;

	const ATTR_server = ATTR_server;

	const ATTR_maxrun = ATTR_maxrun;

	const ATTR_maxreport = ATTR_maxreport;

	const ATTR_total = ATTR_total;

	const ATTR_comment = ATTR_comment;

	const ATTR_cookie = ATTR_cookie;

	const ATTR_qrank = ATTR_qrank;

	const ATTR_altid = ATTR_altid;

	const ATTR_etime = ATTR_etime;

	const ATTR_exitstat = ATTR_exitstat;

	const ATTR_forwardx11 = ATTR_forwardx11;

	const ATTR_submit_args = ATTR_submit_args;

	const ATTR_tokens = ATTR_tokens;

	const ATTR_netcounter = ATTR_netcounter;

	const ATTR_umask = ATTR_umask;

	const ATTR_start_time = ATTR_start_time;

	const ATTR_start_count = ATTR_start_count;

	const ATTR_checkpoint_dir = ATTR_checkpoint_dir;

	const ATTR_checkpoint_name = ATTR_checkpoint_name;

	const ATTR_checkpoint_time = ATTR_checkpoint_time;

	const ATTR_checkpoint_restart_status = ATTR_checkpoint_restart_status;

	const ATTR_restart_name = ATTR_restart_name;

	const ATTR_comp_time = ATTR_comp_time;

	const ATTR_reported = ATTR_reported;

	const ATTR_intcmd = ATTR_intcmd;

	const ATTR_P = ATTR_P;

	const ATTR_aclgren = ATTR_aclgren;

	const ATTR_aclgroup = ATTR_aclgroup;

	const ATTR_aclhten = ATTR_aclhten;

	const ATTR_aclhost = ATTR_aclhost;

	const ATTR_acluren = ATTR_acluren;

	const ATTR_acluser = ATTR_acluser;

	const ATTR_altrouter = ATTR_altrouter;

	const ATTR_checkpoint_min = ATTR_checkpoint_min;

	const ATTR_enable = ATTR_enable;

	const ATTR_fromroute = ATTR_fromroute;

	const ATTR_hostlist = ATTR_hostlist;

	const ATTR_killdelay = ATTR_killdelay;

	const ATTR_maxgrprun = ATTR_maxgrprun;

	const ATTR_maxque = ATTR_maxque;

	const ATTR_maxuserque = ATTR_maxuserque;

	const ATTR_maxuserrun = ATTR_maxuserrun;

	const ATTR_qtype = ATTR_qtype;

	const ATTR_rescassn = ATTR_rescassn;

	const ATTR_rescdflt = ATTR_rescdflt;

	const ATTR_rescmax = ATTR_rescmax;

	const ATTR_rescmin = ATTR_rescmin;

	const ATTR_rerunnable = ATTR_rerunnable;

	const ATTR_rndzretry = ATTR_rndzretry;

	const ATTR_routedest = ATTR_routedest;

	const ATTR_routeheld = ATTR_routeheld;

	const ATTR_routewait = ATTR_routewait;

	const ATTR_routeretry = ATTR_routeretry;

	const ATTR_routelife = ATTR_routelife;

	const ATTR_rsvexpdt = ATTR_rsvexpdt;

	const ATTR_rsvsync = ATTR_rsvsync;

	const ATTR_start = ATTR_start;

	const ATTR_count = ATTR_count;

	const ATTR_number = ATTR_number;

	const ATTR_acllogic = ATTR_acllogic;

	const ATTR_aclgrpslpy = ATTR_aclgrpslpy;

	const ATTR_keepcompleted = ATTR_keepcompleted;

	const ATTR_disallowedtypes = ATTR_disallowedtypes;

	const ATTR_is_transit = ATTR_is_transit;

	const ATTR_aclroot = ATTR_aclroot;

	const ATTR_managers = ATTR_managers;

	const ATTR_dfltque = ATTR_dfltque;

	const ATTR_dispsvrsuffix = ATTR_dispsvrsuffix;

	const ATTR_jobsuffixalias = ATTR_jobsuffixalias;

	const ATTR_defnode = ATTR_defnode;

	const ATTR_locsvrs = ATTR_locsvrs;

	const ATTR_logevents = ATTR_logevents;

	const ATTR_logfile = ATTR_logfile;

	const ATTR_loglevel = ATTR_loglevel;

	const ATTR_mailfrom = ATTR_mailfrom;

	const ATTR_nodepack = ATTR_nodepack;

	const ATTR_nodesuffix = ATTR_nodesuffix;

	const ATTR_operators = ATTR_operators;

	const ATTR_queryother = ATTR_queryother;

	const ATTR_resccost = ATTR_resccost;

	const ATTR_rescavail = ATTR_rescavail;

	const ATTR_schedit = ATTR_schedit;

	const ATTR_scheduling = ATTR_scheduling;

	const ATTR_status = ATTR_status;

	const ATTR_syscost = ATTR_syscost;

	const ATTR_pingrate = ATTR_pingrate;

	const ATTR_ndchkrate = ATTR_ndchkrate;

	const ATTR_tcptimeout = ATTR_tcptimeout;

	const ATTR_jobstatrate = ATTR_jobstatrate;

	const ATTR_polljobs = ATTR_polljobs;

	const ATTR_downonerror = ATTR_downonerror;

	const ATTR_disableserveridcheck = ATTR_disableserveridcheck;

	const ATTR_jobnanny = ATTR_jobnanny;

	const ATTR_ownerpurge = ATTR_ownerpurge;

	const ATTR_qcqlimits = ATTR_qcqlimits;

	const ATTR_momjobsync = ATTR_momjobsync;

	const ATTR_maildomain = ATTR_maildomain;

	const ATTR_pbsversion = ATTR_pbsversion;

	const ATTR_submithosts = ATTR_submithosts;

	const ATTR_allownodesubmit = ATTR_allownodesubmit;

	const ATTR_allowproxyuser = ATTR_allowproxyuser;

	const ATTR_autonodenp = ATTR_autonodenp;

	const ATTR_servername = ATTR_servername;

	const ATTR_logfilemaxsize = ATTR_logfilemaxsize;

	const ATTR_logfilerolldepth = ATTR_logfilerolldepth;

	const ATTR_logkeepdays = ATTR_logkeepdays;

	const ATTR_nextjobnum = ATTR_nextjobnum;

	const ATTR_extraresc = ATTR_extraresc;

	const ATTR_schedversion = ATTR_schedversion;

	const ATTR_acctkeepdays = ATTR_acctkeepdays;

	const ATTR_lockfile = ATTR_lockfile;

	const ATTR_credentiallifetime = ATTR_credentiallifetime;

	const ATTR_jobmustreport = ATTR_jobmustreport;

	const ATTR_LockfileUpdateTime = ATTR_LockfileUpdateTime;

	const ATTR_LockfileCheckTime = ATTR_LockfileCheckTime;

	const ATTR_npdefault = ATTR_npdefault;

	const ATTR_jobstarttimeout = ATTR_jobstarttimeout;

	const ATTR_jobforcecanceltime = ATTR_jobforcecanceltime;

	const ATTR_NODE_state = ATTR_NODE_state;

	const ATTR_NODE_np = ATTR_NODE_np;

	const ATTR_NODE_properties = ATTR_NODE_properties;

	const ATTR_NODE_ntype = ATTR_NODE_ntype;

	const ATTR_NODE_jobs = ATTR_NODE_jobs;

	const ATTR_NODE_status = ATTR_NODE_status;

	const ATTR_NODE_note = ATTR_NODE_note;

	const ATTR_mailsubjectfmt = ATTR_mailsubjectfmt;

	const ATTR_mailbodyfmt = ATTR_mailbodyfmt;

	const CHECKPOINT_UNSPECIFIED = CHECKPOINT_UNSPECIFIED;

	const NO_HOLD = NO_HOLD;

	const NO_JOIN = NO_JOIN;

	const NO_KEEP = NO_KEEP;

	const MAIL_AT_ABORT = MAIL_AT_ABORT;

	const DELDELAY = DELDELAY;

	const DELPURGE = DELPURGE;

	const PURGECOMP = PURGECOMP;

	const EXECQUEONLY = EXECQUEONLY;

	const RERUNFORCE = RERUNFORCE;

	const USER_HOLD = USER_HOLD;

	const OTHER_HOLD = OTHER_HOLD;

	const SYSTEM_HOLD = SYSTEM_HOLD;

	const ND_free = ND_free;

	const ND_offline = ND_offline;

	const ND_down = ND_down;

	const ND_reserve = ND_reserve;

	const ND_job_exclusive = ND_job_exclusive;

	const ND_job_sharing = ND_job_sharing;

	const ND_busy = ND_busy;

	const ND_state_unknown = ND_state_unknown;

	const ND_timeshared = ND_timeshared;

	const ND_cluster = ND_cluster;

	const Q_DT_batch = Q_DT_batch;

	const Q_DT_interactive = Q_DT_interactive;

	const Q_DT_rerunable = Q_DT_rerunable;

	const Q_DT_nonrerunable = Q_DT_nonrerunable;

	const Q_DT_fault_tolerant = Q_DT_fault_tolerant;

	const Q_DT_fault_intolerant = Q_DT_fault_intolerant;

	const Q_DT_job_array = Q_DT_job_array;

	const MAX_ENCODE_BFR = MAX_ENCODE_BFR;

	const MGR_CMD_CREATE = MGR_CMD_CREATE;

	const MGR_CMD_DELETE = MGR_CMD_DELETE;

	const MGR_CMD_SET = MGR_CMD_SET;

	const MGR_CMD_UNSET = MGR_CMD_UNSET;

	const MGR_CMD_LIST = MGR_CMD_LIST;

	const MGR_CMD_PRINT = MGR_CMD_PRINT;

	const MGR_CMD_ACTIVE = MGR_CMD_ACTIVE;

	const MGR_OBJ_NONE = MGR_OBJ_NONE;

	const MGR_OBJ_SERVER = MGR_OBJ_SERVER;

	const MGR_OBJ_QUEUE = MGR_OBJ_QUEUE;

	const MGR_OBJ_JOB = MGR_OBJ_JOB;

	const MGR_OBJ_NODE = MGR_OBJ_NODE;

	const MSG_OUT = MSG_OUT;

	const MSG_ERR = MSG_ERR;

	const SHUT_SIG = SHUT_SIG;

	const SHUT_IMMEDIATE = SHUT_IMMEDIATE;

	const SHUT_DELAY = SHUT_DELAY;

	const SHUT_QUICK = SHUT_QUICK;

	const SIG_RESUME = SIG_RESUME;

	const SIG_SUSPEND = SIG_SUSPEND;

	const PBS_MAXHOSTNAME = PBS_MAXHOSTNAME;

	const MAXPATHLEN = MAXPATHLEN;

	const MAXNAMLEN = MAXNAMLEN;

	const MAX_NOTE = MAX_NOTE;

	const MAX_NOTE_STR = MAX_NOTE_STR;

	const PBS_MAXUSER = PBS_MAXUSER;

	const PBS_MAXGRPN = PBS_MAXGRPN;

	const PBS_MAXQUEUENAME = PBS_MAXQUEUENAME;

	const PBS_MAXSERVERNAME = PBS_MAXSERVERNAME;

	const PBS_MAXJOBARRAYLEN = PBS_MAXJOBARRAYLEN;

	const PBS_MAXSEQNUM = PBS_MAXSEQNUM;

	const PBS_MAXPORTNUM = PBS_MAXPORTNUM;

	const PBS_MAXJOBARRAY = PBS_MAXJOBARRAY;

	const PBS_MAXSVRJOBID = PBS_MAXSVRJOBID;

	const PBS_MAXCLTJOBID = PBS_MAXCLTJOBID;

	const PBS_MAXDEST = PBS_MAXDEST;

	const PBS_MAXROUTEDEST = PBS_MAXROUTEDEST;

	const PBS_USE_IFF = PBS_USE_IFF;

	const PBS_INTERACTIVE = PBS_INTERACTIVE;

	const PBS_TERM_BUF_SZ = PBS_TERM_BUF_SZ;

	const PBS_TERM_CCA = PBS_TERM_CCA;

	const PBS_QS_VERSION_BASE = PBS_QS_VERSION_BASE;

	const PBS_QS_VERSION_INT = PBS_QS_VERSION_INT;

	const PBS_QS_VERSION = PBS_QS_VERSION;

	const PBS_BATCH_SERVICE_NAME = PBS_BATCH_SERVICE_NAME;

	const PBS_BATCH_SERVICE_PORT = PBS_BATCH_SERVICE_PORT;

	const PBS_BATCH_SERVICE_NAME_DIS = PBS_BATCH_SERVICE_NAME_DIS;

	const PBS_BATCH_SERVICE_PORT_DIS = PBS_BATCH_SERVICE_PORT_DIS;

	const PBS_MOM_SERVICE_NAME = PBS_MOM_SERVICE_NAME;

	const PBS_MOM_SERVICE_PORT = PBS_MOM_SERVICE_PORT;

	const PBS_MANAGER_SERVICE_NAME = PBS_MANAGER_SERVICE_NAME;

	const PBS_MANAGER_SERVICE_PORT = PBS_MANAGER_SERVICE_PORT;

	const PBS_SCHEDULER_SERVICE_NAME = PBS_SCHEDULER_SERVICE_NAME;

	const PBS_SCHEDULER_SERVICE_PORT = PBS_SCHEDULER_SERVICE_PORT;

	const CHECKPOINTHOLD = CHECKPOINTHOLD;

	const CHECKPOINTCONT = CHECKPOINTCONT;

	const MOM_DEFAULT_CHECKPOINT_DIR = MOM_DEFAULT_CHECKPOINT_DIR;

	const SET = 0;

	const c_UNSET = c_UNSET;

	const INCR = INCR;

	const DECR = DECR;

	const EQ = EQ;

	const NE = NE;

	const GE = GE;

	const GT = GT;

	const LE = LE;

	const LT = LT;

	const DFLT = DFLT;

	const MERGE = MERGE;

	static function pbs_errno_set($pbs_errno) {
		pbs_errno_set($pbs_errno);
	}

	static function pbs_errno_get() {
		return pbs_errno_get();
	}

	static function pbs_server_set($pbs_server) {
		pbs_server_set($pbs_server);
	}

	static function pbs_server_get() {
		return pbs_server_get();
	}

	static function avail($connect,$resc) {
		return avail($connect,$resc);
	}

	static function pbs_asyrunjob($c_,$jobid,$location,$extend) {
		return pbs_asyrunjob($c_,$jobid,$location,$extend);
	}

	static function pbs_alterjob_async($connect,$job_id,$attrib,$extend) {
		return pbs_alterjob_async($connect,$job_id,$attrib,$extend);
	}

	static function pbs_alterjob($connect,$job_id,$attrib,$extend) {
		return pbs_alterjob($connect,$job_id,$attrib,$extend);
	}

	static function pbs_connect($server) {
		return pbs_connect($server);
	}

	static function pbs_query_max_connections() {
		return pbs_query_max_connections();
	}

	static function pbs_default() {
		return pbs_default();
	}

	static function pbs_fbserver() {
		return pbs_fbserver();
	}

	static function pbs_get_server_list() {
		return pbs_get_server_list();
	}

	static function pbs_deljob($connect,$job_id,$extend) {
		return pbs_deljob($connect,$job_id,$extend);
	}

	static function pbs_disconnect($connect) {
		return pbs_disconnect($connect);
	}

	static function pbs_geterrmsg($connect) {
		return pbs_geterrmsg($connect);
	}

	static function pbs_holdjob($connect,$job_id,$hold_type,$extend) {
		return pbs_holdjob($connect,$job_id,$hold_type,$extend);
	}

	static function pbs_checkpointjob($connect,$job_id,$extend) {
		return pbs_checkpointjob($connect,$job_id,$extend);
	}

	static function pbs_locjob($connect,$job_id,$extend) {
		return pbs_locjob($connect,$job_id,$extend);
	}

	static function pbs_manager($connect,$command,$obj_type,$obj_name,$attrib,$extend) {
		return pbs_manager($connect,$command,$obj_type,$obj_name,$attrib,$extend);
	}

	static function pbs_movejob($connect,$job_id,$destination,$extend) {
		return pbs_movejob($connect,$job_id,$destination,$extend);
	}

	static function pbs_msgjob($connect,$job_id,$file,$message,$extend) {
		return pbs_msgjob($connect,$job_id,$file,$message,$extend);
	}

	static function pbs_orderjob($connect,$job1,$job2,$extend) {
		return pbs_orderjob($connect,$job1,$job2,$extend);
	}

	static function pbs_rescquery($connect,$rlist,$nresc,$avail,$alloc,$resv,$down) {
		return pbs_rescquery($connect,$rlist,$nresc,$avail,$alloc,$resv,$down);
	}

	static function pbs_rescreserve($connect,$rlist,$nresc,$phandle) {
		return pbs_rescreserve($connect,$rlist,$nresc,$phandle);
	}

	static function pbs_rescrelease($connect,$rhandle) {
		return pbs_rescrelease($connect,$rhandle);
	}

	static function pbs_rerunjob($connect,$job_id,$extend) {
		return pbs_rerunjob($connect,$job_id,$extend);
	}

	static function pbs_rlsjob($connect,$job_id,$hold_type,$extend) {
		return pbs_rlsjob($connect,$job_id,$hold_type,$extend);
	}

	static function pbs_runjob($connect,$jobid,$loc,$extend) {
		return pbs_runjob($connect,$jobid,$loc,$extend);
	}

	static function pbs_selectjob($connect,$select_list,$extend) {
		return pbs_selectjob($connect,$select_list,$extend);
	}

	static function pbs_sigjob($connect,$job_id,$signal,$extend) {
		return pbs_sigjob($connect,$job_id,$signal,$extend);
	}

	static function pbs_sigjobasync($connect,$job_id,$signal,$extend) {
		return pbs_sigjobasync($connect,$job_id,$signal,$extend);
	}

	static function pbs_statfree($stat) {
		pbs_statfree($stat);
	}

	static function pbs_statjob($connect,$id,$attrib,$extend) {
		$r=pbs_statjob($connect,$id,$attrib,$extend);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new batch_status($r);
			}
			return new $c($r);
		}
		return $r;
	}

	static function pbs_selstat($connect,$select_list,$extend) {
		$r=pbs_selstat($connect,$select_list,$extend);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new batch_status($r);
			}
			return new $c($r);
		}
		return $r;
	}

	static function pbs_statque($connect,$id,$attrib,$extend) {
		$r=pbs_statque($connect,$id,$attrib,$extend);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new batch_status($r);
			}
			return new $c($r);
		}
		return $r;
	}

	static function pbs_statserver($connect,$attrib,$extend) {
		$r=pbs_statserver($connect,$attrib,$extend);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new batch_status($r);
			}
			return new $c($r);
		}
		return $r;
	}

	static function pbs_statnode($connect,$id,$attrib,$extend) {
		$r=pbs_statnode($connect,$id,$attrib,$extend);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (!class_exists($c)) {
				return new batch_status($r);
			}
			return new $c($r);
		}
		return $r;
	}

	static function pbs_submit($connect,$attrib,$script,$destination,$extend) {
		return pbs_submit($connect,$attrib,$script,$destination,$extend);
	}

	static function pbs_terminate($connect,$manner,$extend) {
		return pbs_terminate($connect,$manner,$extend);
	}

	static function totpool($connect,$update) {
		return totpool($connect,$update);
	}

	static function usepool($connect,$update) {
		return usepool($connect,$update);
	}
}

/* PHP Proxy Classes */
class attrl {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'attrl_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_pbs_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('attrl_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'attrl_'.$var.'_get';
		if (function_exists($func)) {
			$r = call_user_func($func,$this->_cPtr);
			if (!is_resource($r)) return $r;
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			return new $c($r);
		}
		if ($var === 'thisown') return swig_pbs_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_attrl') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_attrl();
	}
}

class attropl {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'attropl_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_pbs_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('attropl_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'attropl_'.$var.'_get';
		if (function_exists($func)) {
			$r = call_user_func($func,$this->_cPtr);
			if (!is_resource($r)) return $r;
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			return new $c($r);
		}
		if ($var === 'thisown') return swig_pbs_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_attropl') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_attropl();
	}
}

class batch_status {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'batch_status_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_pbs_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('batch_status_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'batch_status_'.$var.'_get';
		if (function_exists($func)) {
			$r = call_user_func($func,$this->_cPtr);
			if (!is_resource($r)) return $r;
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			return new $c($r);
		}
		if ($var === 'thisown') return swig_pbs_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_batch_status') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_batch_status();
	}
}


?>
